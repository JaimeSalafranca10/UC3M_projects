dataf1[j,7] = mean(qualifying$position[qualifying$driverId == i])
dataf1[j,8] = sum(results$positionOrder[results$driverId == i]==1)
dataf1[j,9] = sum(results$positionOrder[results$driverId == i]<4)
dataf1[j,10] = sum(qualifying$position[qualifying$driverId == i]==1)
dataf1[j,11] = sum(results$positionText[results$driverId == i]=="R")
dataf1[j,12] = n_distinct(results$constructorId[results$driverId== i])
dataf1[j,13] = mean(pitstops$milliseconds[pitstops$driverId== i])
dataf1[j,14] = n_distinct(results$year[results$driverId== i])
dataf1[j,15] = sum(results$laps[results$driverId== i])
dataf1[j,16] = sum(results$rank[results$driverId == i]==1)
}
for(j in 1:854){
i = dataf1$driverId[j]
dataf1[j,4] = nrow(results[results$driverId== i,])
dataf1[j,5] = sum(results$points[results$driverId== i])
dataf1[j,6] = mean(results$positionOrder[results$driverId == i])
dataf1[j,7] = mean(qualifying$position[qualifying$driverId == i])
dataf1[j,8] = sum(results$positionOrder[results$driverId == i]==1)
dataf1[j,9] = sum(results$positionOrder[results$driverId == i]<4)
dataf1[j,10] = sum(qualifying$position[qualifying$driverId == i]==1)
dataf1[j,11] = sum(results$positionText[results$driverId == i]=="R")
dataf1[j,12] = n_distinct(results$constructorId[results$driverId== i])
dataf1[j,13] = mean(pitstops$milliseconds[pitstops$driverId== i])
dataf1[j,14] = n_distinct(results$year[results$driverId== i])
dataf1[j,15] = sum(results$laps[results$driverId== i])
dataf1[j,16] = sum(results$rank[results$driverId == i]==1)
}
head(dataf1)
world_champions1 = c("farina","hawthorn","phil_hill","surtees","hulme","hunt",
"andretti","jones", "scheckter","rosberg","keke_rosberg",
"villeneuve","mansell","button","raikkonen","damon_hill")
world_champions2 = c("ascari","hill","clark","fittipaldi","alonso",
"hakkinen","max_verstappen")
world_champions3 = c("brabham","stewart","lauda","piquet","senna")
world_champions4 = c("prost","vettel")
world_champions5 = c("fangio")
world_champions7 = c("hamilton","michael_schumacher")
for (i in 1:nrow(dataf1)){
name = dataf1$driverName[i]
if(name %in% world_champions1){
dataf1$championsships[i] = 1
}else if(name %in% world_champions2){
dataf1$championsships[i] = 2
}else if(name %in% world_champions3){
dataf1$championsships[i] = 3
}else if(name %in% world_champions4){
dataf1$championsships[i] = 4
}else if(name %in% world_champions5){
dataf1$championsships[i] = 5
}else if(name %in% world_champions7){
dataf1$championsships[i] = 7
}else{
dataf1$championsships[i] = 0
}
}
sum(dataf1$championsships)
countries_data = data.frame(matrix(nrow =length(unique(countries)),ncol=15))
colnames(countries_data) = c("nationality", "total.races",
"total_points","mean_result_race",
"mean_result_qualy", "wins","podiums","poles","retirements",
"constructors","mean_timr_pitstop","seasons","total_laps",
"number_of_fastest_lap","championsships")
View(countries_data)
countries_data[,1] = unique(countries)
for(j in 1:length(unique(countries))){
i = countries_data[j,1]
countries_data[j,2] = sum(dataf1$total.races[dataf1$nationality == i])
countries_data[j,3] = sum(dataf1$total_points[dataf1$nationality == i])
countries_data[j,4] = mean(dataf1$mean_result_race[dataf1$nationality == i])
countries_data[j,5] = mean(dataf1$mean_result_qualy[dataf1$nationality == i])
countries_data[j,6] = sum(dataf1$wins[dataf1$nationality == i])
countries_data[j,7] = sum(dataf1$poles[dataf1$nationality == i])
countries_data[j,8] = sum(dataf1$poles[dataf1$nationality == i])
countries_data[j,9] = sum(dataf1$retirements[dataf1$nationality == i])
countries_data[j,10] = sum(dataf1$constructors[dataf1$nationality == i])
countries_data[j,11] = mean(dataf1$mean_timr_pitstop[dataf1$nationality == i])
countries_data[j,12] = sum(dataf1$seasons[dataf1$nationality == i])
countries_data[j,13] = sum(dataf1$total_laps[dataf1$nationality == i])
countries_data[j,14] = sum(dataf1$number_of_fastest_lap[dataf1$nationality == i])
countries_data[j,15] = sum(dataf1$championsships[dataf1$nationality == i])
}
Y = countries_data[,-c(1,11)]
for(i in 1:854){
if(is.na(dataf1$mean_result_qualy[i])){
dataf1$mean_result_qualy[i] = mean(results$grid[results$driverId== i])
}
}
barplot(colMeans(is.na(dataf1)), las=2)
f1= dataf1[,-c(1,2,3,13)]
boxplot(f1, las=2, col="darkblue")
boxplot(scale(f1), las=2, col="darkblue")
for(j in 1:length(unique(countries))){
i = countries_data[j,1]
countries_data[j,2] = sum(dataf1$total.races[dataf1$nationality == i])
countries_data[j,3] = sum(dataf1$total_points[dataf1$nationality == i])
countries_data[j,4] = mean(dataf1$mean_result_race[dataf1$nationality == i])
countries_data[j,5] = mean(dataf1$mean_result_qualy[dataf1$nationality == i])
countries_data[j,6] = sum(dataf1$wins[dataf1$nationality == i])
countries_data[j,7] = sum(dataf1$poles[dataf1$nationality == i])
countries_data[j,8] = sum(dataf1$poles[dataf1$nationality == i])
countries_data[j,9] = sum(dataf1$retirements[dataf1$nationality == i])
countries_data[j,10] = sum(dataf1$constructors[dataf1$nationality == i])
countries_data[j,11] = mean(dataf1$mean_timr_pitstop[dataf1$nationality == i])
countries_data[j,12] = sum(dataf1$seasons[dataf1$nationality == i])
countries_data[j,13] = sum(dataf1$total_laps[dataf1$nationality == i])
countries_data[j,14] = sum(dataf1$number_of_fastest_lap[dataf1$nationality == i])
countries_data[j,15] = sum(dataf1$championsships[dataf1$nationality == i])
}
Y = countries_data[,-c(1,11)]
is.na(f1) %>% sum
pca = prcomp(f1,scale = TRUE)
summary(pca)
R = cor(f1)   # correlation matrix
eigen(R)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(R, method="color",
type="upper", order="hclust",
addCoef.col = NULL, # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
screeplot(pca,main="Screeplot",col="blue",type="barplot",pch=19)
fviz_screeplot(pca, addlabels = TRUE)
barplot(pca$rotation[,1], las=2, col="darkblue")
sum(pca$rotation[,1]^2)
fviz_contrib(pca, choice = "var", axes = 1)
# The worst
drivers1[order(pca$x[,1])][(length(drivers1)-10):length(drivers1)]
# The best
drivers1[order(pca$x[,1])][1:30]
barplot(pca$rotation[,2], las=2, col="darkblue")
# The worst
drivers1[order(pca$x[,2])][(length(drivers1)-10):length(drivers1)]
# The best
drivers1[order(pca$x[,2])][1:30]
fviz_contrib(pca, choice = "var", axes = 2)
barplot(pca$rotation[,3], las=2, col="darkblue")
fviz_contrib(pca, choice = "var", axes = 3)
# The worst
drivers1[order(pca$x[,3])][(length(drivers1)-5):length(drivers1)]
# The best
drivers1[order(pca$x[,3])][1:10]
drivers1[order(pca$x[,3])]
# The best
drivers1[order(pca$x[,3])][1:10]
head(get_pca_ind(pca)$contrib[,1]) # this is in %, that is between 0 and 100
head((pca$x[,1]^2)/(pca$sdev[1]^2))/dim(f1)[1] # this is between 0 and 1
fviz_contrib(pca, choice = "ind", axes = 1, top=100)
drivers1[order(get_pca_ind(pca)$contrib[,1],decreasing=T)][1:10]
biplot(pca)
fviz_pca_var(pca, col.var = "contrib")
fviz_pca_biplot(pca, repel = TRUE)
data.frame(z1=-pca$x[,1],z2=pca$x[,2]) %>%
ggplot(aes(z1,z2,label=drivers1,color=f1$podiums)) + geom_point(size=0) +
labs(title="PCA", x="PC1", y="PC2") +
theme_bw() + scale_color_gradient(low="lightblue", high="darkblue")+theme(legend.position="bottom") + geom_text(size=2, hjust=0.6, vjust=0, check_overlap = TRUE)
data.frame(z1=-pca$x[,3],z2=pca$x[,1]) %>%
ggplot(aes(z1,z2,label=drivers1,color=f1$retirements)) + geom_point(size=0) +
labs(title="PCA", x="PC1", y="PC2") +
theme_bw() + scale_color_gradient(low="yellow", high="darkred")+theme(legend.position="bottom") + geom_text(size=2, hjust=0.6, vjust=0, check_overlap = TRUE)
data.frame(z1=-pca$x[,1],country = countries) %>% group_by(country) %>% summarise(mean=mean(z1)) %>% arrange(desc(mean))
head(data.frame(z1=-pca$x[,1],country = countries) %>% group_by(country) %>% summarise(mean=mean(z1)) %>% arrange(desc(mean)))
data.frame(z1=-pca$x[,1],country = countries) %>% group_by(country) %>% summarise(mean=mean(z1)) %>% arrange(desc(mean))
head(data.frame(z1=-pca$x[,1],country = countries) %>% group_by(country) %>% summarise(mean=mean(z1)) %>% arrange(desc(mean)))
X = scale(f1)
set.seed(345)
fit = kmeans(X, centers=4, nstart=100)
groups = fit$cluster
groups
centers=fit$centers
centers
barplot(table(groups), col="blue")
table(groups)
fviz_cluster(fit, data = X, geom = c("point"),ellipse.type = 'norm', pointsize=1)+
theme_minimal() + geom_text(label=drivers1,hjust=0, vjust=0,size=2,check_overlap=T)+scale_fill_brewer(palette="Paired")
d <- dist(X, method="euclidean")
sil = silhouette(groups, d)
plot(sil, col=1:5, main="", border=NA)
summary(sil)
fviz_nbclust(X, kmeans, method = 'wss')
fviz_nbclust(X, kmeans, method = 'silhouette')
fviz_nbclust(X, kmeans, method = 'gap_stat', k.max = 20)
x.f <- factanal(f1, factors = 3, rotation="none", scores="regression")
#Missing values
aggr(Data, numbers = TRUE, sortVars = TRUE, labels = names(Data),
cex.axis = .7, gap = 1, ylab= c('Missing data','Pattern'))
library(lubridate)
library(VIM)
library(VIM)
#Missing values
aggr(Data, numbers = TRUE, sortVars = TRUE, labels = names(Data),
cex.axis = .7, gap = 1, ylab= c('Missing data','Pattern'))
#Missing values
aggr(dataf1, numbers = TRUE, sortVars = TRUE, labels = names(Data),
cex.axis = .7, gap = 1, ylab= c('Missing data','Pattern'))
#Missing values
aggr(dataf1, numbers = TRUE, sortVars = TRUE, cex.axis = .7, gap = 1, ylab= c('Missing data','Pattern'))
rm(list=ls())
library(dplyr)
library(ggplot2)
library(tidyverse)
library(GGally) # ggplot2-based visualization of correlations
library(factoextra)
library(corrplot)
library(cluster)
library(lubridate)
library(VIM)
drivers = read.csv("drivers.csv")
results= read.csv("results.csv")
qualifying = read.csv("qualifying.csv")
pitstops = read.csv("pit_stops.csv")
races = read.csv("races.csv")
drivers_standings = read.csv("driver_standings.csv")
lap_times = read.csv("lap_times.csv")
lap_times = read.csv("lap_times.csv")
sprint_results = read.csv("sprint_results.csv")
races2 = races[,(1:2)]
results= merge(results,races2, by = "raceId")
dataf1 = data.frame(matrix(nrow=854, ncol=17))
colnames(dataf1) = c("driverId", "driverName","nationality", "total.races",
"total_points","mean_result_race",
"mean_result_qualy", "wins","podiums","poles","retirements",
"constructors","mean_timr_pitstop","seasons","total_laps",
"number_of_fastest_lap","championsships")
dataf1[,1] = drivers[,1]
dataf1[,2] = drivers[,2]
drivers1 = drivers[,2]
countries = drivers[,8]
dataf1[,3] = drivers[,8]
dataf1[,17] = 0
for(j in 1:854){
i = dataf1$driverId[j]
dataf1[j,4] = nrow(results[results$driverId== i,])
dataf1[j,5] = sum(results$points[results$driverId== i])
dataf1[j,6] = mean(results$positionOrder[results$driverId == i])
dataf1[j,7] = mean(qualifying$position[qualifying$driverId == i])
dataf1[j,8] = sum(results$positionOrder[results$driverId == i]==1)
dataf1[j,9] = sum(results$positionOrder[results$driverId == i]<4)
dataf1[j,10] = sum(qualifying$position[qualifying$driverId == i]==1)
dataf1[j,11] = sum(results$positionText[results$driverId == i]=="R")
dataf1[j,12] = n_distinct(results$constructorId[results$driverId== i])
dataf1[j,13] = mean(pitstops$milliseconds[pitstops$driverId== i])
dataf1[j,14] = n_distinct(results$year[results$driverId== i])
dataf1[j,15] = sum(results$laps[results$driverId== i])
dataf1[j,16] = sum(results$rank[results$driverId == i]==1)
}
for(j in 1:854){
i = dataf1$driverId[j]
dataf1[j,4] = nrow(results[results$driverId== i,])
dataf1[j,5] = sum(results$points[results$driverId== i])
dataf1[j,6] = mean(results$positionOrder[results$driverId == i])
dataf1[j,7] = mean(qualifying$position[qualifying$driverId == i])
dataf1[j,8] = sum(results$positionOrder[results$driverId == i]==1)
dataf1[j,9] = sum(results$positionOrder[results$driverId == i]<4)
dataf1[j,10] = sum(qualifying$position[qualifying$driverId == i]==1)
dataf1[j,11] = sum(results$positionText[results$driverId == i]=="R")
dataf1[j,12] = n_distinct(results$constructorId[results$driverId== i])
dataf1[j,13] = mean(pitstops$milliseconds[pitstops$driverId== i])
dataf1[j,14] = n_distinct(results$year[results$driverId== i])
dataf1[j,15] = sum(results$laps[results$driverId== i])
dataf1[j,16] = sum(results$rank[results$driverId == i]==1)
}
head(dataf1)
world_champions1 = c("farina","hawthorn","phil_hill","surtees","hulme","hunt",
"andretti","jones", "scheckter","rosberg","keke_rosberg",
"villeneuve","mansell","button","raikkonen","damon_hill")
world_champions2 = c("ascari","hill","clark","fittipaldi","alonso",
"hakkinen","max_verstappen")
world_champions3 = c("brabham","stewart","lauda","piquet","senna")
world_champions4 = c("prost","vettel")
world_champions5 = c("fangio")
world_champions7 = c("hamilton","michael_schumacher")
for (i in 1:nrow(dataf1)){
name = dataf1$driverName[i]
if(name %in% world_champions1){
dataf1$championsships[i] = 1
}else if(name %in% world_champions2){
dataf1$championsships[i] = 2
}else if(name %in% world_champions3){
dataf1$championsships[i] = 3
}else if(name %in% world_champions4){
dataf1$championsships[i] = 4
}else if(name %in% world_champions5){
dataf1$championsships[i] = 5
}else if(name %in% world_champions7){
dataf1$championsships[i] = 7
}else{
dataf1$championsships[i] = 0
}
}
#We verify that the sum of championships is 72.
sum(dataf1$championsships)
#Missing values
aggr(dataf1, numbers = TRUE, sortVars = TRUE, cex.axis = .7, gap = 1, ylab= c('Missing data','Pattern'))
X = scale(f1)
for(i in 1:854){
if(is.na(dataf1$mean_result_qualy[i])){
dataf1$mean_result_qualy[i] = mean(results$grid[results$driverId== i])
}
}
barplot(colMeans(is.na(dataf1)), las=2)
f1= dataf1[,-c(1,2,3,13)]
boxplot(f1, las=2, col="darkblue")
boxplot(scale(f1), las=2, col="darkblue")
X = scale(f1)
x.f <- factanal(X, factors = 3, rotation="none", scores="regression")
x.f <- factanal(X, factors = 3, rotation="none", scores="Bartlett")
x.f <- factanal(X, factors = 10, rotation="none", scores="Bartlett")
x.f <- factanal(X, factors = 2, rotation="none", scores="Bartlett")
x.f <- factanal(X, factors = 2, rotation="none", scores="regression")
heatmap(scale(Y), scale = "none",
distfun = function(x){dist(x, method = "euclidean")},
hclustfun = function(x){hclust(x, method = "ward.D2")},
cexRow = 0.5, labRow = unique(countries))
countries_data = data.frame(matrix(nrow =length(unique(countries)),ncol=15))
colnames(countries_data) = c("nationality", "total.races",
"total_points","mean_result_race",
"mean_result_qualy", "wins","podiums","poles","retirements",
"constructors","mean_timr_pitstop","seasons","total_laps",
"number_of_fastest_lap","championsships")
countries_data[,1] = unique(countries)
for(j in 1:length(unique(countries))){
i = countries_data[j,1]
countries_data[j,2] = sum(dataf1$total.races[dataf1$nationality == i])
countries_data[j,3] = sum(dataf1$total_points[dataf1$nationality == i])
countries_data[j,4] = mean(dataf1$mean_result_race[dataf1$nationality == i])
countries_data[j,5] = mean(dataf1$mean_result_qualy[dataf1$nationality == i])
countries_data[j,6] = sum(dataf1$wins[dataf1$nationality == i])
countries_data[j,7] = sum(dataf1$poles[dataf1$nationality == i])
countries_data[j,8] = sum(dataf1$poles[dataf1$nationality == i])
countries_data[j,9] = sum(dataf1$retirements[dataf1$nationality == i])
countries_data[j,10] = sum(dataf1$constructors[dataf1$nationality == i])
countries_data[j,11] = mean(dataf1$mean_timr_pitstop[dataf1$nationality == i])
countries_data[j,12] = sum(dataf1$seasons[dataf1$nationality == i])
countries_data[j,13] = sum(dataf1$total_laps[dataf1$nationality == i])
countries_data[j,14] = sum(dataf1$number_of_fastest_lap[dataf1$nationality == i])
countries_data[j,15] = sum(dataf1$championsships[dataf1$nationality == i])
}
Y = countries_data[,-c(1,11)]
heatmap(scale(Y), scale = "none",
distfun = function(x){dist(x, method = "euclidean")},
hclustfun = function(x){hclust(x, method = "ward.D2")},
cexRow = 0.5, labRow = unique(countries))
heatmap(scale(X), scale = "none",
distfun = function(x){dist(x, method = "euclidean")},
hclustfun = function(x){hclust(x, method = "ward.D2")},
cexRow = 0.5, labRow = drivers1)
Y2 = scale(Y)
x.f <- factanal(Y2, factors = 2, rotation="none", scores="regression")
View(Y)
View(Y)
fit.pam <- eclust(X, "pam", stand=TRUE, k=5, graph=F)
fviz_cluster(fit.pam, data = X, geom = c("point"), pointsize=1)+
theme_minimal()+geom_text(label=names,hjust=0, vjust=0,size=2,check_overlap = F)+scale_fill_brewer(palette="Paired")
fit.pam <- eclust(X, "pam", stand=TRUE, k=5, graph=F)
fviz_cluster(fit.pam, data = X, geom = c("point"), pointsize=1)
fviz_cluster(fit.pam, data = X, geom = c("point"), pointsize=1)+  theme_minimal()+geom_text(label=drivers1 ,hjust=0, vjust=0,size=2,check_overlap = F)+scale_fill_brewer(palette="Paired")
fviz_cluster(fit.pam, data = X, geom = c("point"), pointsize=1)+  theme_minimal()+geom_text(label=drivers1 ,hjust=0, vjust=0,size=2,check_overlap = F)
fviz_cluster(fit.pam, data = X, geom = c("point"), pointsize=1)+  theme_minimal()+geom_text(label=drivers1 ,hjust=0, vjust=0,size=2,check_overlap = T)
fit.pam <- eclust(X, "pam", stand=TRUE, k=3, graph=F)
fviz_cluster(fit.pam, data = X, geom = c("point"), pointsize=1)+  theme_minimal()+geom_text(label=drivers1 ,hjust=0, vjust=0,size=2,check_overlap = T)
+scale_fill_brewer(palette="Paired")
fviz_cluster(fit.pam, data = X, geom = c("point"), pointsize=1)+  theme_minimal()+geom_text(label=drivers1 ,hjust=0, vjust=0,size=2,check_overlap = T)+scale_fill_brewer(palette="Paired")
fviz_cluster(fit.pam, data = X, geom = c("point"), pointsize=1)+  theme_minimal()+geom_text(label=drivers1 ,hjust=0, vjust=0,size=2,check_overlap = T)
centers2=fit.pam$medoids
barplot(centers2[1,], las=2, col="darkblue")
barplot(centers2[2,], las=2, col="darkblue")
barplot(centers2[3,], las=2, col="darkblue")
barplot(centers2[3,], las=2, col="darkblue")
barplot(centers2[4,], las=2, col="darkblue")
# Select here your favorite clustering tool
map = data.frame(country=unique(countries), value=as.factor(fit.pam$clustering))
# Select here your favorite clustering tool
map = data.frame(country=countries, value=as.factor(fit.pam$clustering))
#Convert the country code into iso3c using the function countrycode()
map$country = countrycode(map$country, 'country.name', 'iso3c')
as.data.frame(X) %>% mutate(cluster=factor(fit.pam$clustering), names=drivers1, hdi=HDI) %>%
ggplot(aes(x = cluster, y = hdi)) +
geom_boxplot(fill="lightblue") +
labs(title = "HDI by cluster", x = "", y = "", col = "")
library(kernlab)
fit.ker <- kkmeans(as.matrix(X), centers=3, kernel="rbfdot") # Radial Basis kernel (Gaussian)
centers(fit.ker)
size(fit.ker)
withinss(fit.ker)
fviz_cluster(object.ker, geom = c("point"), ellipse=T,pointsize=1)+
theme_minimal()+geom_text(label=names,hjust=0, vjust=0,size=2,check_overlap = T)+scale_fill_brewer(palette="Paired")
object.ker = list(data = X, cluster = fit.ker@.Data)
fviz_cluster(object.ker, geom = c("point"), ellipse=T,pointsize=1)+
theme_minimal()+geom_text(label=names,hjust=0, vjust=0,size=2,check_overlap = T)+scale_fill_brewer(palette="Paired")
fviz_cluster(object.ker, geom = c("point"), ellipse=T,pointsize=1)+
theme_minimal()+geom_text(label=drivers1,hjust=0, vjust=0,size=2,check_overlap = T)+scale_fill_brewer(palette="Paired")
fit.ker <- kkmeans(as.matrix(X), centers=4, kernel="rbfdot") # Radial Basis kernel (Gaussian)
fit.ker <- kkmeans(as.matrix(X), centers=4, kernel="rbfdot") # Radial Basis kernel (Gaussian)
centers(fit.ker)
centers(fit.ker)
size(fit.ker)
withinss(fit.ker)
object.ker = list(data = X, cluster = fit.ker@.Data)
fviz_cluster(object.ker, geom = c("point"), ellipse=T,pointsize=1)+
theme_minimal()+geom_text(label=drivers1,hjust=0, vjust=0,size=2,check_overlap = T)+scale_fill_brewer(palette="Paired")
d = dist(scale(X), method = "euclidean")
hc <- hclust(d, method = "ward.D2")
hc$labels <- names
fviz_dend(x = hc,
k=5,
palette = "jco",
rect = TRUE, rect_fill = TRUE,
rect_border = "jco"
)
hc$labels <- drivers1
fviz_dend(x = hc,
k=5,
palette = "jco",
rect = TRUE, rect_fill = TRUE,
rect_border = "jco"
)
fviz_dend(x = hc,
k = 5,
color_labels_by_k = TRUE,
cex = 0.8,
type = "phylogenic",
repel = TRUE)+  labs(title="Socio-economic-health tree clustering of the world") + theme(axis.text.x=element_blank(),axis.text.y=element_blank())
fviz_dend(x = hc,
k = 3,
color_labels_by_k = TRUE,
cex = 0.8,
type = "phylogenic",
repel = TRUE)+  labs(title="Historic drivers of F1") + theme(axis.text.x=element_blank(),axis.text.y=element_blank())
fviz_dend(x = hc,
k=3,
palette = "jco",
rect = TRUE, rect_fill = TRUE,
rect_border = "jco"
)
res.Mclust <- Mclust(scale(X))
fit.ker <- kkmeans(as.matrix(X), centers=3, kernel="rbfdot") # Radial Basis kernel (Gaussian)
fit.ker <- kkmeans(as.matrix(X), centers=3, kernel="rbfdot") # Radial Basis kernel (Gaussian)
centers(fit.ker)
centers(fit.ker)
size(fit.ker)
withinss(fit.ker)
object.ker = list(data = X, cluster = fit.ker@.Data)
fviz_cluster(object.ker, geom = c("point"), ellipse=T,pointsize=1)+
theme_minimal()+geom_text(label=drivers1,hjust=0, vjust=0,size=2,check_overlap = T)+scale_fill_brewer(palette="Paired")
res.Mclust <- Mclust(scale(X))
library(mclust)
res.Mclust <- Mclust(scale(X))
summary(res.Mclust)
# The clustering is probabilistic: for each country we don't have a unique group but the probabilities the country belongs to each of the groups
head(res.Mclust$z)
# Of course the tool assign the group with highest probability
head(res.Mclust$classification)
X2 <- scale(X)
X2$mclust <-
fviz_mclust(object = res.Mclust, what = "BIC", pallete = "jco") +
scale_x_discrete(limits = c(1:10))
fviz_mclust(object = res.Mclust, what = "classification", geom = "point",
pallete = "jco")
# Computes the adjusted Rand index comparing two classifications.
# The closer to 1 the more agreement
adjustedRandIndex(res.Mclust$classification, fit.pam$clustering)
adjustedRandIndex(res.Mclust$classification, groups.hc)
d = dist(scale(Y), method = "euclidean")
hc <- hclust(d, method = "ward.D2")
hc$labels <- drivers1
fviz_dend(x = hc,
k=3,
palette = "jco",
rect = TRUE, rect_fill = TRUE,
rect_border = "jco"
)
hc$labels <- unique(countries)
fviz_dend(x = hc,
k=3,
palette = "jco",
rect = TRUE, rect_fill = TRUE,
rect_border = "jco"
)
fviz_dend(x = hc,
k=3,
palette = "jco",
rect = TRUE, rect_fill = TRUE,
rect_border = "jco"
) +geom_text(label=drivers1,hjust=0, vjust=0,size=2,check_overlap = T)
d = dist(scale(X), method = "euclidean")
hc <- hclust(d, method = "ward.D2")
hc$labels <- drivers1
fviz_dend(x = hc,
k=3,
palette = "jco",
rect = TRUE, rect_fill = TRUE,
rect_border = "jco"
) +geom_text(label=drivers1,hjust=0, vjust=0,size=2,check_overlap = T)
QI <- quantile(part.aggr$total_part, 0.25)
QI <- quantile(dataf1, 0.25)
QS <- quantile(dataf1, 0.75)
QI <- quantile(dataf1$total_laps, 0.25)
QS <- quantile(dataf1$total_laps, 0.75)
IQR = QS-QI
sum(dataf1$total_laps < QI - 1.5*IQR | dataf1$total_laps > QS + 1.5*IQR)
View(dataf1$total_laps < QI - 1.5*IQR | dataf1$total_laps > QS + 1.5*IQR)
dataf1[which(dataf1$total_laps < QI - 1.5*IQR | dataf1$total_laps > QS + 1.5*IQR),]
QI <- quantile(dataf1$total_points, 0.25)
QS <- quantile(dataf1$total_points, 0.75)
IQR = QS-QI
sum(dataf1$total_points < QI - 1.5*IQR | dataf1$total_points > QS + 1.5*IQR)
dataf1[which(dataf1$total_points < QI - 1.5*IQR | dataf1$total_points > QS + 1.5*IQR),]
QI <- quantile(X$total_points, 0.25)
setwd("~/UC3M/2ndyear/1stCuatri/Statistical Learning/homework1")
